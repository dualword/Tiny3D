#include "shader/util.glsl"
#include "shader/hiz.glsl"

layout(local_size_x = 1) in;

struct Transform {
	vec4 trans;
	vec4 rotat;
	vec4 bound;
	vec4 mesh;
};

layout(binding = 1, std430) buffer InPosition {
	Transform inTrans[];
};

layout(binding = 2, std430) buffer OutPosition {
	mat4 outMatrices[];
};

#ifndef AnimPass
	layout(binding = 4, std430) buffer IndirectNormal {
		Indirect normals[];
	};
	layout(binding = 5, std430) buffer IndirectSingle {
		Indirect singles[];
	};
	layout(binding = 6, std430) buffer IndirectBill {
		Indirect bills[];
	};
#else
	layout(binding = 7, std430) buffer IndirectAnim {
		Indirect anims[];
	};
#endif

layout(binding = 0) uniform sampler2D texDepth;
uniform mat4 viewProjectMatrix;
uniform mat4 prevVPMatrix;
uniform vec2 uSize;
uniform vec2 uCamParam;
uniform float uMaxLevel;
uniform uint pass;
uniform uint bufferPass;
uniform ivec4 uCount;

#define Comp <

void main() {
	uint insIndex = gl_GlobalInvocationID.x + pass * MAX_DISPATCH;
	Transform transform = inTrans[insIndex];
	ivec4 meshid = ivec4(transform.mesh);
	vec3 translate = transform.trans.xyz;
	mat4 outMat;
#ifndef AnimPass
	bool isNormal = (meshid.x Comp uCount.x) && (bufferPass == AllBuf || bufferPass == NormalBuf);
	bool isSingle = (meshid.y Comp uCount.y) && (bufferPass == AllBuf || bufferPass == SingleBuf);
	bool isBillbd = (meshid.z Comp uCount.z) && (bufferPass == AllBuf || bufferPass == BillBuf);
#else
	outMat = Translate(translate) * QuatToMat4(transform.rotat) * Scale(transform.trans.w);
	outMat = transpose(outMat);
	outMat[3] = transform.mesh;
#endif
	

#ifdef ShadowPass
	#ifndef AnimPass
		if(isBillbd) {
			outMat = mat4(transform.trans, transform.rotat, transform.bound, transform.mesh);
			uint index = atomicAdd(bills[meshid.z].primCount, 1);
			outMatrices[bills[meshid.z].baseInstance + index] = outMat;
		} else {
			outMat = Translate(translate) * QuatToMat4(transform.rotat) * Scale(transform.trans.w);
			if(isNormal) {
				uint index = atomicAdd(normals[meshid.x].primCount, 1);
				outMatrices[normals[meshid.x].baseInstance + index] = outMat;
			}
			if(isSingle) {
				uint index = atomicAdd(singles[meshid.y].primCount, 1);
				outMatrices[singles[meshid.y].baseInstance + index] = outMat;
			}
		} 
	#else
		outMatrices[anims[meshid.w].baseInstance + atomicAdd(anims[meshid.w].primCount, 1)] = outMat;
	#endif
#else
		vec4 bound = transform.bound;
		vec3 size = bound.xyz;
		vec3 pose = vec3(translate.x, bound.w, translate.z);

		vec4 bv0 = vec4(pose + size * vec3( 0.5,  0.5,  0.5), 1.0);
		vec4 bv1 = vec4(pose + size * vec3( 0.5,  0.5, -0.5), 1.0);
		vec4 bv2 = vec4(pose + size * vec3(-0.5,  0.5, -0.5), 1.0);
		vec4 bv3 = vec4(pose + size * vec3(-0.5,  0.5,  0.5), 1.0);
		vec4 bv4 = vec4(pose + size * vec3( 0.5, -0.5,  0.5), 1.0);
		vec4 bv5 = vec4(pose + size * vec3( 0.5, -0.5, -0.5), 1.0);
		vec4 bv6 = vec4(pose + size * vec3(-0.5, -0.5, -0.5), 1.0);
		vec4 bv7 = vec4(pose + size * vec3(-0.5, -0.5,  0.5), 1.0);

		bool occ = HizQuery(prevVPMatrix, texDepth, uSize, uCamParam, uMaxLevel, 
							bv0, bv1, bv2, bv3, bv4, bv5, bv6, bv7, 0.01);
		
		if(occ) return;
		else {
			#ifndef AnimPass
				if(isBillbd) {
					outMat = mat4(transform.trans, transform.rotat, transform.bound, transform.mesh);
					uint index = atomicAdd(bills[meshid.z].primCount, 1);
					outMatrices[bills[meshid.z].baseInstance + index] = outMat;
				} else {
					outMat = Translate(translate) * QuatToMat4(transform.rotat) * Scale(transform.trans.w);
					if(isNormal) {
						uint index = atomicAdd(normals[meshid.x].primCount, 1);
						outMatrices[normals[meshid.x].baseInstance + index] = outMat;
					}
					if(isSingle) {
						uint index = atomicAdd(singles[meshid.y].primCount, 1);
						outMatrices[singles[meshid.y].baseInstance + index] = outMat;
					}
				}
			#else
				outMatrices[anims[meshid.w].baseInstance + atomicAdd(anims[meshid.w].primCount, 1)] = outMat;
			#endif
		}
#endif
}


