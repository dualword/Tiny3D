#include "shader/util.glsl"
#include "shader/hiz.glsl"

layout(local_size_x = 1) in;

struct Transform {
	vec4 trans;
	vec3 rotat; 
	float uScale;
	vec4 bound;
	vec4 mesh;
};

#ifndef AnimPass
layout(binding = 1, std430) buffer InNormal {
	Transform inNormals[];
};
layout(binding = 2, std430) buffer InSingle {
	Transform inSingles[];
};
layout(binding = 3, std430) buffer InBill {
	Transform inBills[];
};
#else
layout(binding = 4, std430) buffer InAnim {
	Transform inAnims[];
};
#endif

#ifndef AnimPass
layout(binding = 5, std430) buffer OutNormal {
	mat4 outNormals[];
};
layout(binding = 6, std430) buffer OutSingle {
	mat4 outSingles[];
};
layout(binding = 7, std430) buffer OutBill {
	mat4 outBills[];
};
#else
layout(binding = 8, std430) buffer OutAnim {
	mat4 outAnims[];
};
#endif

layout(binding = 9, std430) buffer IndirectNormal {
	Indirect normals[];
};
layout(binding = 10, std430) buffer IndirectSingle {
	Indirect singles[];
};
layout(binding = 11, std430) buffer IndirectBill {
	Indirect bills[];
};
layout(binding = 12, std430) buffer IndirectAnim {
	Indirect anims[];
};

struct Bounding {
	vec4 bv[8];
};

layout(binding = 0) uniform sampler2D texDepth;
uniform mat4 viewProjectMatrix;
uniform mat4 prevVPMatrix;
uniform vec2 uSize;
uniform vec2 uCamParam;
uniform float uMaxLevel;
uniform uint pass;
uniform uint bufferPass;
uniform ivec4 uCount;
uniform uvec4 uInsCount;

Bounding GetBound(Transform ins, vec3 translate) {
	vec4 bound = ins.bound;
	vec3 size = bound.xyz;
	vec3 pose = vec3(translate.x, bound.w, translate.z);

	Bounding res;
	res.bv[0] = vec4(pose + size * vec3( 0.5,  0.5,  0.5), 1.0);
	res.bv[1] = vec4(pose + size * vec3( 0.5,  0.5, -0.5), 1.0);
	res.bv[2] = vec4(pose + size * vec3(-0.5,  0.5, -0.5), 1.0);
	res.bv[3] = vec4(pose + size * vec3(-0.5,  0.5,  0.5), 1.0);
	res.bv[4] = vec4(pose + size * vec3( 0.5, -0.5,  0.5), 1.0);
	res.bv[5] = vec4(pose + size * vec3( 0.5, -0.5, -0.5), 1.0);
	res.bv[6] = vec4(pose + size * vec3(-0.5, -0.5, -0.5), 1.0);
	res.bv[7] = vec4(pose + size * vec3(-0.5, -0.5,  0.5), 1.0);
	return res;
}

bool FrustumCull(Bounding ins) {
	vec4 p0 = viewProjectMatrix * ins.bv[0]; 
	vec4 p1 = viewProjectMatrix * ins.bv[1];
	vec4 p2 = viewProjectMatrix * ins.bv[2]; 
	vec4 p3 = viewProjectMatrix * ins.bv[3]; 
	vec4 p4 = viewProjectMatrix * ins.bv[4]; 
	vec4 p5 = viewProjectMatrix * ins.bv[5]; 
	vec4 p6 = viewProjectMatrix * ins.bv[6]; 
	vec4 p7 = viewProjectMatrix * ins.bv[7];

	return CheckCull(p0, p1, p2, p3, p4, p5, p6, p7);
}

bool OccQuery(Bounding ins) {
	return HizQuery(prevVPMatrix, texDepth, uSize, uCamParam, uMaxLevel, 
		ins.bv[0], ins.bv[1], ins.bv[2], ins.bv[3], ins.bv[4], ins.bv[5], ins.bv[6], ins.bv[7], 0.01);
}

void main() {
	uint insIndex = gl_GlobalInvocationID.x + pass * MAX_DISPATCH;

#ifndef AnimPass
	bool hasNormal = insIndex + 1 <= uInsCount.x;
	bool hasSingle = insIndex + 1 <= uInsCount.y;
	bool hasBill = insIndex + 1 <= uInsCount.z;

	if(hasNormal) {
		Transform transNormal = inNormals[insIndex];
		int meshid = int(transNormal.mesh.x);
		if(meshid < uCount.x) {
			vec3 translate = transNormal.trans.xyz;
			Bounding bound = GetBound(transNormal, translate);
			if(!FrustumCull(bound)) {
				#ifndef ShadowPass
				if(!OccQuery(bound)) 
				#endif
				{
					bool uniformScale = transNormal.uScale > 0.0;
					vec3 scale = uniformScale ? vec3(transNormal.trans.w) : UnpackFloat2Vec(transNormal.trans.w);
					vec4 quat = DecodeQuat(transNormal.rotat);
					mat4 outMat = Translate(translate) * QuatToMat4(quat) * Scale(scale);
					uint index = atomicAdd(normals[meshid].primCount, 1);
					uint oindex = normals[meshid].baseInstance + index;
					outMat[3].w = transNormal.mesh.w;
					outNormals[oindex] = outMat;
				}
			}
		}
	}

	if(hasSingle) {
		Transform transSingle = inSingles[insIndex];
		int meshid = int(transSingle.mesh.y);
		if(meshid < uCount.y) {
			vec3 translate = transSingle.trans.xyz;
			Bounding bound = GetBound(transSingle, translate);
			if(!FrustumCull(bound)) {
				#ifndef ShadowPass
				if(!OccQuery(bound)) 
				#endif
				{
					bool uniformScale = transSingle.uScale > 0.0;
					vec3 scale = uniformScale ? vec3(transSingle.trans.w) : UnpackFloat2Vec(transSingle.trans.w);
					vec4 quat = DecodeQuat(transSingle.rotat);
					mat4 outMat = Translate(translate) * QuatToMat4(quat) * Scale(scale);
					uint index = atomicAdd(singles[meshid].primCount, 1);
					uint oindex = singles[meshid].baseInstance + index;
					outMat[3].w = transSingle.mesh.w;
					outSingles[oindex] = outMat;
				}
			}
		}
	}

	if(hasBill) {
		Transform transBill = inBills[insIndex];
		int meshid = int(transBill.mesh.z);
		if(meshid < uCount.z) {
			vec3 translate = transBill.trans.xyz;
			Bounding bound = GetBound(transBill, translate);
			if(!FrustumCull(bound)) {
				#ifndef ShadowPass
				if(!OccQuery(bound)) 
				#endif
				{
					mat4 outMat = mat4(transBill.trans, vec4(transBill.rotat, transBill.uScale), transBill.bound, transBill.mesh);
					uint index = atomicAdd(bills[meshid].primCount, 1);
					uint oindex = bills[meshid].baseInstance + index;
					outMat[3].w = transBill.mesh.w;
					outBills[oindex] = outMat;
				}
			}
		}
	}
#else
	bool hasAnim = insIndex + 1 <= uInsCount.w;
	if(hasAnim) {
		Transform transAnim = inAnims[insIndex];
		int meshid = int(transAnim.mesh.z);
		vec3 translate = transAnim.trans.xyz;

		bool uniformScale = transAnim.uScale > 0.0;
		vec3 scale = uniformScale ? vec3(transAnim.trans.w) : UnpackFloat2Vec(transAnim.trans.w);
		vec4 quat = DecodeQuat(transAnim.rotat);
		mat4 outMat = Translate(translate) * QuatToMat4(quat) * Scale(scale);
		outMat = transpose(outMat);
		outMat[3] = transAnim.mesh;

		#ifndef ShadowPass
		Bounding bound = GetBound(transAnim, translate);
		if(!OccQuery(bound))
		#endif
		{
			uint oindex = anims[meshid].baseInstance + atomicAdd(anims[meshid].primCount, 1);
			outAnims[oindex] = outMat;
		}
	}
#endif
}


