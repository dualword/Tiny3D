#include "shader/util.glsl"
#include "shader/mesh.glsl"

layout(local_size_x = 1) in;

layout(binding = 1, std430) buffer InCounts {
	CountBuff counter[];
};

layout(binding = 2, std430) buffer IndirectNormal {
	Indirect normals[];
};
layout(binding = 3, std430) buffer IndirectSingle {
	Indirect singles[];
};
layout(binding = 4, std430) buffer IndirectBillbd {
	Indirect billbds[];
};
layout(binding = 5, std430) buffer IndirectAnimat {
	Indirect animats[];
};
layout(binding = 6, std430) buffer IndirectTransp {
	Indirect transps[];
};

uniform uvec4 uMeshCounts;
uniform uint uTransCounts;

void main() {
	uint meshid = gl_GlobalInvocationID.x;
	
	bvec4 hasMesh = bvec4(meshid < uMeshCounts.x, 
						  meshid < uMeshCounts.y, 
						  meshid < uMeshCounts.z, 
						  meshid < uMeshCounts.w);
	bool hasTransp = meshid < uTransCounts;

	for(int n = 0; n < meshid; ++n) {
		if(hasMesh.x) atomicAdd(normals[meshid].baseInstance, counter[n].countBuff.x); // normal
		if(hasMesh.y) atomicAdd(singles[meshid].baseInstance, counter[n].countBuff.y); // single
		if(hasMesh.z) atomicAdd(billbds[meshid].baseInstance, counter[n].countBuff.z); // billbd
		if(hasMesh.w) atomicAdd(animats[meshid].baseInstance, counter[n].countBuff.w); // animat
		if(hasTransp) atomicAdd(transps[meshid].baseInstance, counter[n].exCountBuff.x); // transp
	}
}
