#include "shader/util.glsl"
#include "shader/triangle.glsl"
#include "shader/hiz.glsl"

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

layout(binding = 0) uniform sampler2D texDepth;
uniform BindlessSampler2D distortionTex, roadTex, heightTex, heightNormal;
uniform vec3 mapTrans, mapScale;
uniform vec4 mapInfo;
uniform float time;
uniform vec3 eyePos;
uniform mat4 viewProjectMatrix;
uniform mat4 viewMatrix;
uniform float fullSize;

uniform mat4 prevVPMatrix;
uniform vec2 uSize;
uniform vec2 uCamParam;
uniform float uMaxLevel;
uniform ivec2 refChunk;

const float WindStrength = 0.65;
const vec2 WindFrequency = vec2(0.05, 0.05);

#define INVALID_LEVEL 1024

layout(binding = 1, std430) buffer OutPose {
	mat4 outPose[];
};

layout(binding = 2, std430) buffer IndirectBuff {
	uint  count;
	uint  instanceCount;
	uint  first;
	uint  baseInstance;
} indirect;

mat3 AngleAxis3x3(float angle, vec3 axis) {
	float c = cos(angle), s = sin(angle);

	float t = 1.0 - c;
	float x = axis.x;
	float y = axis.y;
	float z = axis.z;
	
	return mat3(
		t * x * x + c, t * x * y + s * z, t * x * z - s * y,
		t * x * y - s * z, t * y * y + c, t * y * z + s * x,
		t * x * z + s * y, t * y * z - s * x, t * z * z + c
	);
}

mat3 GetWindMat(vec2 pos) {
	vec2 uv = pos * 0.01 + WindFrequency * time;
	vec2 windSample = texture(distortionTex, uv).xy * 2.0 - 1.0;
	windSample *= WindStrength;
	vec3 wind = normalize(vec3(windSample, 0.0));
	mat3 windRotation = AngleAxis3x3(PI * windSample.x, wind);
	return windRotation;
}

int GetGrassChunk(ivec2 target) {
	return target.x + target.y * LINE_CHUNKS;
}

vec3 GetTerrainPosition(vec2 ref, vec2 invTexSize) {
	vec2 coord = ref * invTexSize;
	return vec3(coord.x, texture(heightTex, coord).x, coord.y);
}

void main() {
	uvec2 cur = gl_GlobalInvocationID.xy;
	vec2 dPose = vec2(fullSize * 0.5) - vec2(cur);
	
	float spread = 0.25 + length(dPose) * 0.004;
	vec3 worldPose = vec3(0.0);
	worldPose.xz = floor(eyePos.xz * 0.02) * 50.0 + dPose * spread;
	// Random grass xz position
	vec2 dRand = vec2(random(worldPose, 0.1), random(worldPose, 0.2));
	worldPose.xz += dRand * spread;

	float fStepSize = mapInfo.x, fChunkSize = float(CHUNK_SIZE);
	vec2 mapMeshSize = mapInfo.zw - vec2(fStepSize);

	vec2 grassPos = (worldPose.xz - mapTrans.xz) / mapScale.xz;
	vec2 coord = grassPos / mapMeshSize;
	if(any(bvec2(any(lessThan(coord, vec2(0.0))), any(greaterThan(coord, vec2(1.0)))))) return;
	else if(texture(roadTex, coord).r > 0.001) return;

	ivec2 grassChunk = ivec2(floor(grassPos / (fStepSize * fChunkSize)));
	uint levelCurr = GetChunkLevel(refChunk, grassChunk);
	float lodLevel = float(levelCurr);
	
	// Caculate grass pos y;
	vec2 texSize = mapMeshSize / (fStepSize * lodLevel);
	vec2 texPos = coord * texSize;
	vec2 texLD = floor(texPos), texRT = ceil(texPos);
	if(abs(texLD.x - texRT.x) < 0.00001) {
		if(texLD.x > 0.00001) texLD.x -= 1.0;
		else texRT.x += 1.0;
	}
	if(abs(texLD.y - texRT.y) < 0.00001) {
		if(texLD.y > 0.00001) texLD.y -= 1.0;
		else texRT.y += 1.0;
	}
	vec2 texLT = vec2(texLD.x, texRT.y);
	vec2 texRD = vec2(texRT.x, texLD.y);
	
	vec2 invTexSize = vec2(1.0) / texSize;
	vec3 p1 = GetTerrainPosition(texLD, invTexSize);
	vec3 p2 = GetTerrainPosition(texRT, invTexSize);
	vec3 p3 = GetTerrainPosition(texLT, invTexSize);

	if(levelCurr == 1) {
		if(CheckIn(coord, p1, p2, p3))
			worldPose.y = CaculateY(coord, p1, p2, p3);
		else {
			vec3 p4 = GetTerrainPosition(texRD, invTexSize);
			worldPose.y = CaculateY(coord, p1, p4, p2);
		}
	} else {
		int curChunk = GetGrassChunk(grassChunk);
		ivec4 adjChunks = ivec4((curChunk - LINE_CHUNKS) >= 0 ? (curChunk - LINE_CHUNKS) : -1, 
								(curChunk + LINE_CHUNKS) < (LINE_CHUNKS * LINE_CHUNKS) ? (curChunk + LINE_CHUNKS) : -1, 
								(curChunk - 1) >= 0 ? (curChunk - 1) : -1, 
								(curChunk + 1) < (LINE_CHUNKS * LINE_CHUNKS) ? (curChunk + 1) : -1);

		uvec4 levelEdge = uvec4(adjChunks.x >= 0 ? GetLevel(refChunk, adjChunks.x, LINE_CHUNKS) : INVALID_LEVEL, 
								adjChunks.y >= 0 ? GetLevel(refChunk, adjChunks.y, LINE_CHUNKS) : INVALID_LEVEL, 
								adjChunks.z >= 0 ? GetLevel(refChunk, adjChunks.z, LINE_CHUNKS) : INVALID_LEVEL, 
								adjChunks.w >= 0 ? GetLevel(refChunk, adjChunks.w, LINE_CHUNKS) : INVALID_LEVEL);

		ivec2 innerBlock = ivec2(floor(grassPos / fStepSize)) % CHUNK_SIZE;
		bvec4 edgeChunk = greaterThan(uvec4(levelCurr), levelEdge);
		if(edgeChunk.x && (innerBlock.y >= 0 && innerBlock.y < levelCurr)) { // Up edge T crack
			vec2 texH = texLD + vec2(0.5, 0.0);
			vec3 ph = GetTerrainPosition(texH, invTexSize);

			if(CheckIn(coord, p1, ph, p3)) worldPose.y = CaculateY(coord, p1, ph, p3);
			else if(CheckIn(coord, p3, ph, p2)) worldPose.y = CaculateY(coord, p3, ph, p2);
			else {
				vec3 p4 = GetTerrainPosition(texRD, invTexSize);
				worldPose.y = CaculateY(coord, ph, p4, p2);
			}
		} else if(edgeChunk.y && (innerBlock.y >= (CHUNK_SIZE - levelCurr) && innerBlock.y < CHUNK_SIZE)) { // Down edge T crack
			vec2 texH = texRT - vec2(0.5, 0.0);
			vec3 ph = GetTerrainPosition(texH, invTexSize);

			if(CheckIn(coord, p3, p1, ph)) worldPose.y = CaculateY(coord, p3, p1, ph);
			else {
				vec3 p4 = GetTerrainPosition(texRD, invTexSize);		
				if(CheckIn(coord, p1, ph, p4)) worldPose.y = CaculateY(coord, p1, ph, p4);
				else worldPose.y = CaculateY(coord, ph, p4, p2);
			}
		} else if(edgeChunk.z && (innerBlock.x >= 0 && innerBlock.x < levelCurr)) { // Left edge T crack
			vec2 texH = texLD + vec2(0.0, 0.5);
			vec3 ph = GetTerrainPosition(texH, invTexSize);

			if(CheckIn(coord, p3, p2, ph)) worldPose.y = CaculateY(coord, p3, p2, ph);
			else {
				vec3 p4 = GetTerrainPosition(texRD, invTexSize);	
				if(CheckIn(coord, p2, ph, p4)) worldPose.y = CaculateY(coord, p2, ph, p4);
				else worldPose.y = CaculateY(coord, ph, p1, p4);
			}
		} else if(edgeChunk.w && (innerBlock.x >= (CHUNK_SIZE - levelCurr) && innerBlock.x < CHUNK_SIZE)) { // Right edge T crack
			vec2 texH = texRT - vec2(0.0, 0.5);
			vec3 ph = GetTerrainPosition(texH, invTexSize);

			if(CheckIn(coord, p2, ph, p3)) worldPose.y = CaculateY(coord, p2, ph, p3);
			else if(CheckIn(coord, p3, ph, p1)) worldPose.y = CaculateY(coord, p3, ph, p1);
			else {
				vec3 p4 = GetTerrainPosition(texRD, invTexSize);
				worldPose.y = CaculateY(coord, p1, ph, p4);
			}
		} else { // No T crack
			if(CheckIn(coord, p1, p2, p3)) 
				worldPose.y = CaculateY(coord, p1, p2, p3);
			else {
				vec3 p4 = GetTerrainPosition(texRD, invTexSize);
				worldPose.y = CaculateY(coord, p1, p4, p2);
			}
		}
	} 
	worldPose.y = worldPose.y * 255.0 * mapScale.y + mapTrans.y;

	// Caculate occlusion
	float viewz = (viewMatrix * vec4(worldPose, 1.0)).z;
	if(viewz > 0.0) return;
	vec4 projPose = viewProjectMatrix * vec4(worldPose, 1.0);
	if(any(bvec2(any(greaterThan(projPose.xyz, vec3(projPose.w))), projPose.x < -projPose.w))) return;
	
	float rand = (dRand.x + dRand.y) * 0.5;	
	vec2 size = vec2(rand * 0.5 + 0.5, rand * 2.5 + 2.5);

	vec4 topPose = vec4(worldPose + vec3(0.0, size.y, 0.0), 1.0);
	vec4 projTop = viewProjectMatrix * topPose;
	if(projTop.y < -projTop.w) return;

	vec4 leftPose = vec4(worldPose + vec3(-size.x, 0.0, 0.0), 1.0);
	vec4 rightPose = vec4(worldPose + vec3(size.x, 0.0, 0.0), 1.0);

	if(HizQuery(prevVPMatrix, texDepth, uSize, uCamParam, uMaxLevel, 
		topPose, leftPose, rightPose, 0.0001)) return;

	// Wind effect
	mat3 rotMat = RotY(rand * PI);
	mat3 windMat = GetWindMat(worldPose.xz + vec2(viewz));
	rotMat = rotMat * windMat;
	
	// Caculate transform & normal
	mat4 trans = Translate(worldPose) * M3ToM4(rotMat) * Scale(vec3(size, 1.0));
	trans = transpose(trans);
	trans[3] = vec4((texture(heightNormal, coord).xyz - 0.5) * 2.0, 1.0); // normal

	// Output result & add grass instance count
	outPose[atomicAdd(indirect.instanceCount, 1)] = trans;
}
