#include "shader/util.glsl"

layout(local_size_x = 1) in;

#ifndef AnimPass
layout(binding = 1, std430) buffer IndirectNormalBuffer {
	Indirect indirectsNormal[];
};
layout(binding = 2, std430) buffer IndirectSingleBuffer {
	Indirect indirectsSingle[];
};
layout(binding = 3, std430) buffer IndirectBillBuffer {
	Indirect indirectsBill[];
};
#else
layout(binding = 4, std430) buffer IndirectAnimBuffer {
	Indirect indirectsAnim[];
};
#endif
layout(binding = 5, std140) uniform BaseBuffer {
	uvec4 baseBuffer[MAX_MESH];
};

uniform uvec4 uCount;

void main() {
	uint meshIndex = gl_GlobalInvocationID.x;
#ifndef AnimPass
	if(meshIndex + 1 <= uCount.x) {
		indirectsNormal[meshIndex].primCount = 0;
		indirectsNormal[meshIndex].baseInstance = baseBuffer[meshIndex].x;
	}
	if(meshIndex + 1 <= uCount.y) {
		indirectsSingle[meshIndex].primCount = 0;
		indirectsSingle[meshIndex].baseInstance = baseBuffer[meshIndex].y;
	}
	if(meshIndex + 1 <= uCount.z) {
		indirectsBill[meshIndex].primCount = 0;
		indirectsBill[meshIndex].baseInstance = baseBuffer[meshIndex].z;
	}
#else
	indirectsAnim[meshIndex].primCount = 0;
	indirectsAnim[meshIndex].baseInstance = baseBuffer[meshIndex].w;
#endif
}